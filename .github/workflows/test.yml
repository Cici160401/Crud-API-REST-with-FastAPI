name: test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }} 
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}         
          MYSQL_USER: ${{ secrets.DB_USER }}             
          MYSQL_PASSWORD: ${{ secrets.DB_PASSWORD }}     
        ports:
          - 3306:3306
        options: >-
         
          --health-cmd=bash -c "mysqladmin ping -h 127.0.0.1 -u$$MYSQL_USER -p$$MYSQL_PASSWORD"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=15
          --default-authentication-plugin=mysql_native_password 

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc python3-dev libmysqlclient-dev netcat 

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pymysql cryptography pytest pytest-asyncio httpx 
          

      - name: Wait for MySQL to be ready
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_USER: ${{ secrets.DB_USER }}     # <-- ¡Tu script de espera usará estas credenciales de tus Secrets!
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }} # <--
        run: |
          echo "Debug: Iniciando el script de espera de MySQL."
          echo "Esperando a que MySQL inicie en ${DB_HOST}:${DB_PORT}..."
          for i in $(seq 1 60); do
            if nc -z -v -w5 ${DB_HOST} ${DB_PORT}; then
              echo "Debug: Intento $i - Puerto ${DB_PORT} está abierto. Ahora verificando el servicio MySQL con mysqladmin..."
              # Este 'mysqladmin ping' usa las credenciales de tus SECRETS de GitHub.
              if mysqladmin ping -h ${DB_HOST} -u${DB_USER} -p${DB_PASSWORD} &>/dev/null; then
                echo "¡MySQL está funcionando y las credenciales parecen correctas!"
                break
              else
                echo "Debug: Intento $i - El servicio MySQL no responde al ping con las credenciales proporcionadas. Reintentando..."
              fi
            else
              echo "Debug: Intento $i - El puerto ${DB_PORT} aún no está abierto. Sigo esperando..."
            fi
            sleep 5
            if [ $i -eq 60 ]; then
              echo "Error: MySQL no inició a tiempo o rechazó la conexión después de múltiples intentos. Fallando el workflow."
              exit 1
            fi
          done
          echo "Debug: Script de espera de MySQL finalizado."

      - name: Run tests
        env:
          # Todas las variables de entorno para tu aplicación/tests de FastAPI
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          DB_USER: ${{ secrets.DB_USER }}       # <-- ¡Tu aplicación FastAPI usará estas credenciales!
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }} # <--
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: ${{ secrets.DB_NAME }}
          TEST_TOKEN: ${{ secrets.TEST_TOKEN }} # Asegúrate de tener este secreto definido si lo usas
        run: |
          export PYTHONPATH=.
          pytest tests/